<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yoohoo.en.dao.mapper.TStudentBalanceLogMapper" >
  <resultMap id="BaseResultMap" type="com.yoohoo.en.dao.model.TStudentBalanceLog" >
    <id column="log_id" property="logId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="schedule_id" property="scheduleId" jdbcType="INTEGER" />
    <result column="record_id" property="recordId" jdbcType="INTEGER" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="b_type" property="bType" jdbcType="INTEGER" />
    <result column="amount" property="amount" jdbcType="INTEGER" />
    <result column="after_balance" property="afterBalance" jdbcType="INTEGER" />
    <result column="addtime" property="addtime" jdbcType="TIMESTAMP" />
    <result column="mark" property="mark" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    log_id, user_id, schedule_id, record_id, `type`, b_type, amount, after_balance, addtime, 
    mark, `status`
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.yoohoo.en.dao.model.TStudentBalanceLogExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_student_balance_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <include refid="MysqlDialectSuffix" />
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_student_balance_log
    where log_id = #{logId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_student_balance_log
    where log_id = #{logId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.yoohoo.en.dao.model.TStudentBalanceLogExample" >
    delete from t_student_balance_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yoohoo.en.dao.model.TStudentBalanceLog" useGeneratedKeys="true" keyProperty="logId" >
    insert into t_student_balance_log (user_id, schedule_id, record_id, 
      `type`, b_type, amount, 
      after_balance, addtime, mark, 
      `status`)
    values (#{userId,jdbcType=INTEGER}, #{scheduleId,jdbcType=INTEGER}, #{recordId,jdbcType=INTEGER}, 
      #{type,jdbcType=INTEGER}, #{bType,jdbcType=INTEGER}, #{amount,jdbcType=INTEGER}, 
      #{afterBalance,jdbcType=INTEGER}, #{addtime,jdbcType=TIMESTAMP}, #{mark,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.yoohoo.en.dao.model.TStudentBalanceLog" useGeneratedKeys="true" keyProperty="logId" >
    insert into t_student_balance_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="scheduleId != null" >
        schedule_id,
      </if>
      <if test="recordId != null" >
        record_id,
      </if>
      <if test="type != null" >
        `type`,
      </if>
      <if test="bType != null" >
        b_type,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="afterBalance != null" >
        after_balance,
      </if>
      <if test="addtime != null" >
        addtime,
      </if>
      <if test="mark != null" >
        mark,
      </if>
      <if test="memo != null" >
        memo,
      </if>
      <if test="status != null" >
        `status`,
      </if>
      <if test="addUserId != null" >
      	add_user_id
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="scheduleId != null" >
        #{scheduleId,jdbcType=INTEGER},
      </if>
      <if test="recordId != null" >
        #{recordId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="bType != null" >
        #{bType,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=INTEGER},
      </if>
      <if test="afterBalance != null" >
        #{afterBalance,jdbcType=INTEGER},
      </if>
      <if test="addtime != null" >
        #{addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="mark != null" >
        #{mark,jdbcType=VARCHAR},
      </if>
      <if test="memo != null" >
        #{memo,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="addUserId != null" >
        #{addUserId}
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yoohoo.en.dao.model.TStudentBalanceLogExample" resultType="java.lang.Integer" >
    select count(*) from t_student_balance_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_student_balance_log
    <set >
      <if test="record.logId != null" >
        log_id = #{record.logId,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.scheduleId != null" >
        schedule_id = #{record.scheduleId,jdbcType=INTEGER},
      </if>
      <if test="record.recordId != null" >
        record_id = #{record.recordId,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        `type` = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.bType != null" >
        b_type = #{record.bType,jdbcType=INTEGER},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=INTEGER},
      </if>
      <if test="record.afterBalance != null" >
        after_balance = #{record.afterBalance,jdbcType=INTEGER},
      </if>
      <if test="record.addtime != null" >
        addtime = #{record.addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.mark != null" >
        mark = #{record.mark,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        `status` = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_student_balance_log
    set log_id = #{record.logId,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      schedule_id = #{record.scheduleId,jdbcType=INTEGER},
      record_id = #{record.recordId,jdbcType=INTEGER},
      `type` = #{record.type,jdbcType=INTEGER},
      b_type = #{record.bType,jdbcType=INTEGER},
      amount = #{record.amount,jdbcType=INTEGER},
      after_balance = #{record.afterBalance,jdbcType=INTEGER},
      addtime = #{record.addtime,jdbcType=TIMESTAMP},
      mark = #{record.mark,jdbcType=VARCHAR},
      `status` = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yoohoo.en.dao.model.TStudentBalanceLog" >
    update t_student_balance_log
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="scheduleId != null" >
        schedule_id = #{scheduleId,jdbcType=INTEGER},
      </if>
      <if test="recordId != null" >
        record_id = #{recordId,jdbcType=INTEGER},
      </if>
      <if test="type != null" >
        `type` = #{type,jdbcType=INTEGER},
      </if>
      <if test="bType != null" >
        b_type = #{bType,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=INTEGER},
      </if>
      <if test="afterBalance != null" >
        after_balance = #{afterBalance,jdbcType=INTEGER},
      </if>
      <if test="addtime != null" >
        addtime = #{addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="mark != null" >
        mark = #{mark,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        `status` = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where log_id = #{logId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yoohoo.en.dao.model.TStudentBalanceLog" >
    update t_student_balance_log
    set user_id = #{userId,jdbcType=INTEGER},
      schedule_id = #{scheduleId,jdbcType=INTEGER},
      record_id = #{recordId,jdbcType=INTEGER},
      `type` = #{type,jdbcType=INTEGER},
      b_type = #{bType,jdbcType=INTEGER},
      amount = #{amount,jdbcType=INTEGER},
      after_balance = #{afterBalance,jdbcType=INTEGER},
      addtime = #{addtime,jdbcType=TIMESTAMP},
      mark = #{mark,jdbcType=VARCHAR},
      `status` = #{status,jdbcType=INTEGER}
    where log_id = #{logId,jdbcType=INTEGER}
  </update>
  <sql id="MysqlDialectSuffix" >
    <if test="pageHelper != null" >
      <![CDATA[ limit #{pageHelper.begin}, #{pageHelper.length}]]>
    </if>
  </sql>
  <insert id="insertBatch" parameterType="com.yoohoo.en.dao.model.TStudentBalanceLog" >
    insert into t_student_balance_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      log_id,user_id,schedule_id,record_id,type,b_type,amount,after_balance,addtime,mark,status,add_user_id
    </trim>
    values
    <foreach collection="list" index="index" item="item" separator="," >
      (
      <trim suffixOverrides="," >
        #{item.logId,jdbcType=INTEGER},#{item.userId,jdbcType=INTEGER},#{item.scheduleId,jdbcType=INTEGER},#{item.recordId,jdbcType=INTEGER},#{item.type,jdbcType=INTEGER},#{item.bType,jdbcType=INTEGER},#{item.amount,jdbcType=INTEGER},#{item.afterBalance,jdbcType=INTEGER},#{item.addtime,jdbcType=TIMESTAMP},#{item.mark,jdbcType=VARCHAR},#{item.status,jdbcType=INTEGER},#{item.addUserId}
      </trim>
      )
    </foreach>
  </insert>
</mapper>